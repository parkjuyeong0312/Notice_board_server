 Back-End 개발 ToDo List (AI에게 주기 좋은 프롬프트 형태)
📝 프로젝트 설명:

GitHub 사용자 스택 및 contribution 데이터를 기반으로,
랜덤하게 배치된 스티커 형태의 PNG/SVG 이미지를 생성해 반환하는 API 서버를 만든다.
README.md에 <img src="...">로 넣으면 자동 최신화된다.

추가로, ?logo=javascript,python 같은 파라미터를 통해
유저가 직접 원하는 기술 스택 로고를 추가로 지정 가능하다.

🏗 1. 프로젝트 기초 구조
 프로젝트 폴더 구조 생성 (ex. app/, routes/, services/, schemas/)

 requirements.txt or .csproj / package.json 초기화

🔥 2. 기술 스택 / 환경 설정
 FastAPI + Uvicorn, OR ASP.NET Core, OR Node Express 선택

 Dockerfile + docker-compose.yml 작성

 .env 환경변수 (.gitignore 포함)

🗄 3. GitHub API 연동
 GitHub REST 또는 GraphQL API 호출 로직 작성

 사용자 public repo 언어, commit, star 데이터 가져오기

 ?token=... or JWT 통해 private repo까지 포함 가능하도록

🗃 4. DB or 캐싱
 PostgreSQL + Redis docker-compose 구성

 사용자 summary JSON을 Redis에 cache:summary:{username} 형태로 저장

 expire TTL 1시간 설정

 강제 갱신시 ?refresh=true 로 Redis 캐시 무효화

🧩 5. 이미지 생성
 Pillow(Canvas) / C# ImageSharp / Node Canvas 라이브러리 설정

 tech stack 로고들 static asset (PNG/SVG) 준비

 랜덤 위치, 각도, 크기 배치 알고리즘 작성

 ?logo=javascript,python 파싱 → 추가 스티커 적용

⚙ 6. REST API 설계
 GET /api/{username}/stickerboard.png

파라미터: logo, theme, refresh

 GET /api/{username}/summary → JSON으로 raw 데이터 반환

 POST /api/auth/login → GitHub OAuth (JWT 반환)

 GET /api/me → 내 계정 정보 (JWT 필요)

📝 7. Swagger / OpenAPI 문서화
 FastAPI 자동 /docs, or Swashbuckle

 주요 요청/응답, 에러 예시 추가

🚨 8. 에러 / 예외 처리
 깃허브 API limit 초과 → 429

 잘못된 username → 404

 서버 내부 → 500

 JSON 표준 에러 메시지 구조 정의

☁️ 9. 배포 & 인프라
 AWS EC2 + RDS + ElastiCache 구성

 nginx reverse proxy → uvicorn/gunicorn

 HTTPS (Let’s Encrypt)

🚀 10. CI/CD
 GitHub Actions로 build, test, docker-compose up 자동화

 master/main push시 production 배포

💡 추가 ToDo (Optional)
 /api/{username}/stickerboard.svg → hover tooltip & 링크

 ?randseed=123 으로 항상 동일한 배치

 /api/{username}/theme?=friend → 친구 테마 적용

